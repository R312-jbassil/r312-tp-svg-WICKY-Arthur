---
import Layout from "../layouts/Layout.astro";
import Menu from "../Components/Menu.astro";
---

<Layout title="SVG Generator">
    <Menu />
    <main class="container mx-auto p-4">
        <!-- Titre avec indicateur d'état -->
        <div class="text-center mb-6">
            <h1 class="text-3xl font-bold mb-2">SVG Generator</h1>
            <div id="status-message" class="hidden alert"></div>
        </div>

        <div class="flex flex-col lg:flex-row gap-4">
            <!-- Panneau de prévisualisation SVG -->
            <div class="card bg-base-100 shadow-xl flex-1">
                <div class="card-body">
                    <h2 class="card-title">Preview</h2>
                    <div class="divider"></div>
                    <div class="flex items-center justify-center min-h-[400px]">
                        <div
                            id="svg-container"
                            class="flex items-center justify-center w-full h-full"
                        >
                            <!-- SVG preview will be displayed here -->
                            <div class="text-center text-neutral-content">
                                <p>Enter a description and click Generate</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Panneau de code SVG -->
            <div class="card bg-neutral text-neutral-content flex-1">
                <div class="card-body">
                    <h2 class="card-title text-neutral-content">SVG Code</h2>
                    <pre
                        id="svg-output"
                        class="text-xs overflow-auto p-2 max-h-[400px] text-neutral-content rounded-lg">
                    </pre>
                </div>
            </div>
        </div>

        <!-- Formulaire -->
        <div class="mt-6">
            <form id="generator-form" class="form-control w-full">
                <div class="flex gap-2">
                    <input
                        type="text"
                        id="prompt"
                        placeholder="Enter your SVG description (e.g., car, house, tree)"
                        class="input input-bordered flex-1"
                    />

                    <button
                        type="button"
                        id="generate-button"
                        class="btn btn-primary"
                    >
                        <span id="button-text">Generate</span>
                    </button>
                </div>
                <button class="btn btn-secondary" id="edit-button">Edit</button>
                <button class="flex btn" id="save-button">Save</button>
            </form>
        </div>
    </main>
</Layout>

<script>
    //@ts-nocheck

    async function generateSVG(prompt) {
        console.log("Generating SVG for prompt:", prompt);
        const res = await fetch("/api/generateSVG", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(prompt),
        });
        const data = await res.json();
        return data.svg;
    }

    let promptList = [];

    async function handleSubmit() {
        let prompt = "";
        let aiResponse = "";
        const promptElement = document.getElementById("prompt");
        prompt = promptElement ? promptElement.value : "";
        console.log("submitted: ", prompt);
        // Réinitialiser la liste des prompts
        promptList.length = 0;
        promptList.push({ role: "user", content: prompt });
        const svgContainer = document.getElementById("svg-container");
        // Afficher un spinner
        svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
        generateButton.disabled = true;
        editButton.disabled = true;
        let svgOutput = document.getElementById("svg-output");
        // Appeler la fonction pour générer le SVG
        aiResponse = await generateSVG(promptList);
        // Extraire le SVG de la réponse
        const svgMatch = aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i);
        aiResponse.content = svgMatch ? svgMatch[0] : "";
        console.log("svgCode: ", aiResponse.content);
        // Ajouter la réponse de l'IA à la liste des prompts
        promptList.push(aiResponse);
        // Afficher le SVG généré
        svgOutput.textContent = aiResponse.content;
        svgContainer.innerHTML = aiResponse.content;
        // Réactiver les boutons
        generateButton.disabled = false;
        editButton.disabled = false;
    }
    const generateButton = document.getElementById("generate-button");
    if (generateButton) {
        generateButton.addEventListener("click", handleSubmit);
    }

    async function handleEdit() {
        let prompt = "";
        let aiResponse = "";
        const promptElement = document.getElementById("prompt");
        prompt = promptElement ? promptElement.value : "";
        console.log("Prompt soumis : ", prompt);
        // Ajout du prompt de l'utilisateur à la liste
        promptList.push({ role: "user", content: prompt });
        const svgContainer = document.getElementById("svg-container");
        // Afficher un spinner de chargement
        svgContainer.innerHTML += `<span class="loading loading-ring loading-xl"></span>`;
        generateButton.disabled = true;
        editButton.disabled = true;
        let svgOutput = document.getElementById("svg-output");
        // Appeler la fonction pour générer le SVG
        aiResponse = await generateSVG(promptList);
        // Extraire le SVG de la réponse
        const svgMatch = aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i);
        aiResponse.content = svgMatch ? svgMatch[0] : "";
        console.log("Code SVG généré : ", aiResponse.content);
        // Ajouter la réponse de l'IA à la liste des prompts
        promptList.push(aiResponse);
        // Afficher le SVG généré
        svgOutput.textContent = aiResponse.content;
        svgContainer.innerHTML = aiResponse.content;
        // Réactiver les boutons
        generateButton.disabled = false;
        editButton.disabled = false;
        console.log("Historique des prompts : ", promptList);
    }
    const editButton = document.getElementById("edit-button");
    if (editButton) {
        editButton.addEventListener("click", handleEdit);
    }

    const saveButton = document.getElementById("save-button");
    async function saveSVG(params) {
        const res = await fetch("/api/saveSVG", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(params),
        });
        const data = await res.json();
        return data;
    }
    if (saveButton) {
        saveButton.addEventListener("click", async () => {
            const name = prompt("Entrez un nom pour le SVG :");
            const svgOutput =
                document.getElementById("svg-output")?.textContent;
            console.log("Sauvegarde du SVG : ", JSON.stringify(svgOutput));

            const params = {
                nom: name,
                code_svg: svgOutput || "<svg></svg>",
                chat_history: JSON.stringify(promptList),
            };
            await saveSVG(params);
        });
    }

    if (saveButton) {
        saveButton.addEventListener("click", async () => {
            // Demande du nom du SVG à l'utilisateur
            const name = prompt("Donnez un nom à votre création :");
            const svgOutput =
                document.getElementById("svg-output")?.textContent;
            console.log(
                "Préparation de la sauvegarde :",
                JSON.stringify(svgOutput),
            );

            // Préparation des données pour la sauvegarde
            const params = {
                name: name,
                code_svg: svgOutput || "<svg></svg>", // SVG par défaut si vide
                chat_history: JSON.stringify(promptList), // Historique des échanges
            };

            // Sauvegarde et gestion de la réponse
            const result = await saveSVG(params);
            if (result.success) {
                alert("SVG sauvegardé avec succès !");
            } else {
                alert("Erreur lors de la sauvegarde : " + result.error);
            }
        });
    }
</script>
